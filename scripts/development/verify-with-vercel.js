/**
 * Verification using Vercel Postgres
 */

const { createClient } = require('@vercel/postgres');
require('dotenv').config();

// Create client with direct connection
const client = createClient({
  connectionString: process.env.DIRECT_URL,
});

async function verifyWithVercel() {
  console.log('üîç Verifying Community Management System...\n');

  try {
    // Check if community management tables exist
    console.log('üìä Checking community management tables...');
    
    const tables = await client.sql`
      SELECT tablename 
      FROM pg_tables 
      WHERE schemaname = 'public' 
      AND tablename IN ('community_memberships', 'community_data_policies', 'community_research_projects')
      ORDER BY tablename;
    `;
    
    console.log('‚úÖ Community management tables found:');
    tables.rows.forEach(row => {
      console.log(`   - ${row.tablename}`);
    });
    
    if (tables.rows.length < 3) {
      console.log('‚ö†Ô∏è  Some tables may be missing');
    }

    // Check extended community fields
    console.log('\nüåç Checking extended community fields...');
    
    const fields = await client.sql`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'communities' 
      AND column_name IN ('community_type', 'geographic_region', 'traditional_territory', 'verification_status')
      ORDER BY column_name;
    `;
    
    console.log('‚úÖ Extended community fields found:');
    fields.rows.forEach(row => {
      console.log(`   - ${row.column_name}`);
    });

    // Check RLS policies
    console.log('\nüõ°Ô∏è Checking RLS policies...');
    
    const policies = await client.sql`
      SELECT 
        tablename,
        COUNT(*) as policy_count
      FROM pg_policies 
      WHERE schemaname = 'public'
      AND tablename IN ('community_memberships', 'community_data_policies', 'community_research_projects')
      GROUP BY tablename
      ORDER BY tablename;
    `;
    
    console.log('‚úÖ RLS policies found:');
    policies.rows.forEach(row => {
      console.log(`   - ${row.tablename}: ${row.policy_count} policies`);
    });

    // Check indexes
    console.log('\nüìä Checking indexes...');
    
    const indexes = await client.sql`
      SELECT 
        tablename,
        indexname
      FROM pg_indexes 
      WHERE schemaname = 'public' 
      AND tablename IN ('community_memberships', 'community_data_policies', 'community_research_projects')
      AND indexname LIKE 'idx_%'
      ORDER BY tablename, indexname;
    `;
    
    console.log(`‚úÖ Found ${indexes.rows.length} community management indexes:`);
    indexes.rows.forEach(row => {
      console.log(`   - ${row.tablename}: ${row.indexname}`);
    });

    // Test basic table access
    console.log('\nüß™ Testing basic table access...');
    
    try {
      const communityCount = await client.sql`SELECT COUNT(*) as count FROM communities`;
      console.log(`   ‚úÖ Communities table: ${communityCount.rows[0].count} records`);
    } catch (error) {
      console.log(`   ‚ùå Communities table access failed: ${error.message}`);
    }
    
    try {
      const membershipCount = await client.sql`SELECT COUNT(*) as count FROM community_memberships`;
      console.log(`   ‚úÖ Community memberships table: ${membershipCount.rows[0].count} records`);
    } catch (error) {
      console.log(`   ‚ùå Community memberships table access failed: ${error.message}`);
    }
    
    try {
      const policyCount = await client.sql`SELECT COUNT(*) as count FROM community_data_policies`;
      console.log(`   ‚úÖ Community data policies table: ${policyCount.rows[0].count} records`);
    } catch (error) {
      console.log(`   ‚ùå Community data policies table access failed: ${error.message}`);
    }
    
    try {
      const projectCount = await client.sql`SELECT COUNT(*) as count FROM community_research_projects`;
      console.log(`   ‚úÖ Community research projects table: ${projectCount.rows[0].count} records`);
    } catch (error) {
      console.log(`   ‚ùå Community research projects table access failed: ${error.message}`);
    }

    console.log('\nüéâ Community Management System Verification Complete!');
    
    // Summary
    const hasAllTables = tables.rows.length >= 3;
    const hasExtendedFields = fields.rows.length >= 4;
    const hasPolicies = policies.rows.length >= 3;
    const hasIndexes = indexes.rows.length >= 6;
    
    console.log('\nüìã Summary:');
    console.log(`   - Core Tables: ${hasAllTables ? '‚úÖ ALL CREATED' : '‚ùå MISSING SOME'} (${tables.rows.length}/3)`);
    console.log(`   - Extended Fields: ${hasExtendedFields ? '‚úÖ ALL ADDED' : '‚ùå MISSING SOME'} (${fields.rows.length}/4)`);
    console.log(`   - RLS Policies: ${hasPolicies ? '‚úÖ ACTIVE' : '‚ùå INCOMPLETE'} (${policies.rows.length}/3)`);
    console.log(`   - Performance Indexes: ${hasIndexes ? '‚úÖ OPTIMIZED' : '‚ö†Ô∏è  PARTIAL'} (${indexes.rows.length}/7+)`);
    
    if (hasAllTables && hasExtendedFields && hasPolicies) {
      console.log('\nüöÄ Community Management System is fully operational!');
      console.log('   ‚úÖ Task 3 Complete: Community Management System');
      console.log('   üéØ Ready for Task 4: Advanced User Management');
      
      console.log('\nüèõÔ∏è Community Management Features Available:');
      console.log('   - Community registration and verification');
      console.log('   - Member role management (member, researcher, elder, cultural_keeper, admin)');
      console.log('   - Data governance policies with cultural sensitivity levels');
      console.log('   - Research project management with Indigenous protocols');
      console.log('   - Row-level security for data sovereignty');
      console.log('   - Audit logging for compliance');
      
    } else {
      console.log('\n‚ö†Ô∏è  Some components may need attention');
    }

  } catch (error) {
    console.error('‚ùå Verification failed:');
    console.error('Error:', error.message);
    
    if (error.message.includes('relation') && error.message.includes('does not exist')) {
      console.log('\nüîß It looks like the community management tables were not created.');
      console.log('Please run the SQL script in Supabase SQL Editor again.');
    }
  }
}

// Run the verification
verifyWithVercel();